type: edu
files:
  - name: src/minesweeper/Main.java
    visible: true
    text: |
      package minesweeper;
      
      public class Main {
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: test/MinesweeperTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.*;
      import java.util.stream.Collectors;
      
      public class MinesweeperTest extends StageTest<Integer> {
          @Override
          public List<TestCase<Integer>> generate() {
              List<TestCase<Integer>> tests = new ArrayList<>();
              for (int i = 1; i <= 50; i++) {
                  int mines = i;
                  TestCase<Integer> test = new TestCase<Integer>()
                      .setDynamicTesting(() -> {
                          TestedProgram main = new TestedProgram();
                          main.start();
                          String output = main.execute("" + mines);
                          return test(output, mines);
                      });
                  tests.add(test);
                  tests.add(test);
              }
              return tests;
          }
      
          public CheckResult test(String reply, Integer attach) {
              List<String> lines =
                  Arrays.stream(reply.split("\n"))
                      .map(String::trim)
                      .collect(Collectors.toList());
      
              if (lines.isEmpty()) {
                  return CheckResult.wrong(
                      "Looks like you didn't output a single line!"
                  );
              }
      
              if (lines.size() != 9) {
                  return CheckResult.wrong(
                      "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                  );
              }
      
              int mines = 0;
      
              for (String line : lines) {
                  if (line.length() != 9) {
                      return CheckResult.wrong(
                          "One of the lines of the field doesn't have 9 symbols, " +
                              "but has " + line.length() + ".\n" +
                              "This line is \"" + line + "\""
                      );
                  }
      
                  for (char c : line.toCharArray()) {
                      if (c != 'X' && c != '.' && !(c >= '0' && c <= '9')) {
                          return CheckResult.wrong(
                              "One of the characters is not equal to 'X' or '.' or to a number.\n" +
                                  "In this line: \"" + line + "\"."
                          );
                      }
                      if (c == 'X') {
                          mines++;
                      }
                  }
              }
      
              if (attach != mines) {
                  return CheckResult.wrong(
                      "Expected to see " + attach + " mines, found " + mines
                  );
              }
      
              int[] around = new int[] {-1, 0, 1};
      
              for (int y = 0; y < lines.size(); y++) {
                  String line = lines.get(y);
                  for (int x = 0; x < line.length(); x++) {
                      char c = line.charAt(x);
      
                      if (c == 'X') {
                          continue;
                      }
      
                      int minesAround = 0;
      
                      for (int dx : around) {
                          for (int dy : around) {
      
                              int newX = x + dx;
                              int newY = y + dy;
      
                              if (0 <= newX && newX < 9 &&
                                  0 <= newY && newY < 9) {
      
                                  char newC = lines.get(newY).charAt(newX);
      
                                  if (newC == 'X') {
                                      minesAround++;
                                  }
                              }
                          }
                      }
      
                      if (minesAround == 0 && c != '.') {
                          return CheckResult.wrong(
                              "There are no mines around, but found number " + c + ".\n" +
                                  "In line " + (y+1) + ", symbol " + (x+1) + "."
                          );
                      }
      
                      if (minesAround != 0 && c != '0' + minesAround) {
                          return CheckResult.wrong(
                              "In this cell should be number " + minesAround + ", " +
                                  "but found symbol \"" + c + "\".\n" +
                                  "In line " + (y+1) + ", symbol " + (x+1) + "."
                          );
                      }
      
                  }
              }
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/minesweeper/io/Output.java
    visible: true
    text: |
      package minesweeper.io;
      
      import java.io.PrintStream;
      
      public class Output extends PrintStream {
          public Output() {
              super(System.out);
          }
      
      }
    learner_created: true
  - name: src/minesweeper/model/MineField.java
    visible: true
    text: |
      package minesweeper.model;
      
      import minesweeper.model.BombCell.Coordinate;
      
      import java.util.HashMap;
      import java.util.Map;
      import java.util.Random;
      import java.util.function.Consumer;
      
      public class MineField {
          public static int ROW_COUNT = 9;
          public static int COL_COUNT = 9;
      
          private final BombCell[][] field;
          private final Map<Coordinate, BombCell> minesMap;
      
          public MineField() {
              this.field = new BombCell[COL_COUNT][ROW_COUNT];
              this.minesMap = new HashMap<>();
      
              for (int col = 0; col < COL_COUNT; col++) {
                  for (int row = 0; row < ROW_COUNT; row++) {
                      int x = col + 1;
                      int y = row + 1;
                      BombCell cell = new BombCell(x, y);
                      field[COL_COUNT - 1 - row][col] = cell;
                      minesMap.put(cell.getCoordinate(), cell);
                  }
              }
          }
      
          public void setMinesByCount(int count) {
              while (count > 0) {
                  Random random = new Random();
                  int x = random.nextInt(1, ROW_COUNT + 1);
                  int y = random.nextInt(1, COL_COUNT + 1);
                  BombCell cell = minesMap.get(new Coordinate(x, y));
                  if (cell != null && !cell.isBomb()) {
                      cell.setBomb();
                      count--;
                  }
              }
          }
      
          public String getFormattedBoard() {
              StringBuilder sb = new StringBuilder();
              for (int i = 0; i < COL_COUNT; i++) {
                  for (int j = 0; j < ROW_COUNT; j++) {
                      BombCell cell = field[i][j];
                      sb.append(cell.isBomb() ? "X" : ".");
                  }
                  sb.append("\n");
              }
              return sb.toString();
          }
      }
    learner_created: true
  - name: src/minesweeper/Application.java
    visible: true
    text: |
      package minesweeper;
      
      import minesweeper.io.Input;
      import minesweeper.io.Output;
      import minesweeper.model.MineField;
      
      public class Application {
          private final Input input;
          private final Output output;
          private final MineField mineField;
      
          public Application() {
              this.input = new Input();
              this.output = new Output();
              this.mineField = new MineField();
          }
      
          public void run() {
              output.print("How many mines do you want on the field? ");
              int MAX_COUNT = MineField.ROW_COUNT * MineField.COL_COUNT;
              int minesCount = input.nextInt("\\b[1-9]\\b|\\b[1-7][0-9]\\b|\\b8[0-1]\\b", (e) -> output.printf("Only 1 to %d ", MAX_COUNT));
              mineField.setMinesByCount(minesCount);
              String board = mineField.getFormattedBoard();
              output.println(board);
          }
      }
    learner_created: true
  - name: src/minesweeper/io/Input.java
    visible: true
    text: |
      package minesweeper.io;
      
      import java.util.InputMismatchException;
      import java.util.Scanner;
      import java.util.function.Consumer;
      
      public class Input {
          private final Scanner sc;
      
          public Input() {
              this.sc = new Scanner(System.in);
          }
      
          public String next() {
              try {
                  String input = sc.next();
                  sc.nextLine();
                  return input;
              } catch (Exception e) {
                  throw new RuntimeException(e);
              }
          }
      
          public int nextInt(String regex, Consumer<Exception> errorHandler) {
              while (true) {
                  try {
                      String input = sc.next();
                      if (!input.matches(regex)) {
                          throw new InputMismatchException("Incorrect input");
                      }
                      return Integer.parseInt(input);
      
                  } catch (InputMismatchException e) {
                      errorHandler.accept(e);
                  }
              }
          }
      
          public void close() {
              sc.close();
          }
      }
    learner_created: true
  - name: src/minesweeper/model/BombCell.java
    visible: true
    text: |
      package minesweeper.model;
      
      import java.util.Objects;
      
      public class BombCell {
          private boolean bomb;
          private boolean hidden;
          private final Coordinate coordinate;
      
          public BombCell(int x, int y) {
              this(false, x, y);
          }
      
          public BombCell(boolean bomb, int x, int y) {
              this.bomb = bomb;
              this.hidden = true;
              this.coordinate = new Coordinate(x, y);
          }
      
          public boolean isBomb() {
              return bomb;
          }
      
          public void setBomb() {
              this.bomb = true;
          }
      
          public void reveal() {
              this.hidden = true;
          }
      
          public Coordinate getCoordinate() {
              return coordinate;
          }
      
          @Override
          public String toString() {
              return "BombCell{" +
                      "bomb=" + bomb +
                      ", hidden=" + hidden +
                      ", coordinate=" + coordinate +
                      '}';
          }
      
          public record Coordinate(int x, int y) {
              @Override
              public boolean equals(Object object) {
                  if (this == object) return true;
                  if (object == null || getClass() != object.getClass()) return false;
                  Coordinate that = (Coordinate) object;
                  return x == that.x && y == that.y;
              }
      
              @Override
              public int hashCode() {
                  return Objects.hash(x, y);
              }
      
              @Override
              public String toString() {
                  return "Coordinate{" +
                          "x=" + x +
                          ", y=" + y +
                          '}';
              }
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/7202#comment
status: Solved
record: 3
